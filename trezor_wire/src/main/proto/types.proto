syntax = "proto2";

// Sugar for easier handling in Java
option java_package = "io.trezor.deviceprotocol";
option java_outer_classname = "TrezorType";

import "google/protobuf/descriptor.proto";

/**
 * Options for specifying message direction and type of wire (normal/debug)
 */
extend google.protobuf.EnumValueOptions {
    optional bool wire_in = 50002; // message can be transmitted via wire from PC to TREZOR
    optional bool wire_out = 50003; // message can be transmitted via wire from TREZOR to PC
    optional bool wire_debug_in = 50004; // message can be transmitted via debug wire from PC to TREZOR
    optional bool wire_debug_out = 50005; // message can be transmitted via debug wire from TREZOR to PC
}

/**
 * Type of failures returned by Failure message
 * @used_in Failure
 */
enum FailureType {
    Failure_UnexpectedMessage = 1;
    Failure_ButtonExpected = 2;
    Failure_SyntaxError = 3;
    Failure_ActionCancelled = 4;
    Failure_PinExpected = 5;
    Failure_PinCancelled = 6;
    Failure_PinInvalid = 7;
    Failure_InvalidSignature = 8;
    Failure_Other = 9;
    Failure_NotEnoughFunds = 10;
    Failure_NotInitialized = 11;
    Failure_PinMismatch = 12;
    Failure_FirmwareError = 99;
}

/**
 * Type of ouput address specify in transaction
 * @used_in TxOutputType
 */
enum OutputAddressType {
    SPEND = 0;
    TRANSFER = 1;
    CHANGE = 2;
    EXCHANGE = 3;
}

/**
 * Type of button request
 * @used_in ButtonRequest
 */
enum ButtonRequestType {
    ButtonRequest_Other = 1;
    ButtonRequest_FeeOverThreshold = 2;
    ButtonRequest_ConfirmOutput = 3;
    ButtonRequest_ResetDevice = 4;
    ButtonRequest_ConfirmWord = 5;
    ButtonRequest_WipeDevice = 6;
    ButtonRequest_ProtectCall = 7;
    ButtonRequest_SignTx = 8;
    ButtonRequest_FirmwareCheck = 9;
    ButtonRequest_Address = 10;
    ButtonRequest_FirmwareErase = 11;
    ButtonRequest_ConfirmTransferToAccount = 12;
    ButtonRequest_ConfirmTransferToNodePath = 13; /* Deprecated!*/
    ButtonRequest_ChangeLabel = 14;
    ButtonRequest_ChangeLanguage = 15;
    ButtonRequest_EnablePassphrase = 16;
    ButtonRequest_DisablePassphrase = 17;
    ButtonRequest_EncryptAndSignMessage = 18;
    ButtonRequest_EncryptMessage = 19;
    ButtonRequest_ImportPrivateKey = 20;
    ButtonRequest_ImportRecoverySentence = 21;
    ButtonRequest_SignIdentity = 22;
    ButtonRequest_Ping = 23;
    ButtonRequest_RemovePin = 24;
    ButtonRequest_ChangePin = 25;
    ButtonRequest_CreatePin = 26;
    ButtonRequest_GetEntropy = 27;
    ButtonRequest_SignMessage = 28;
    ButtonRequest_ApplyPolicies = 29;
    ButtonRequest_SignExchange = 30;
    ButtonRequest_AutoLockDelayMs = 31;
    ButtonRequest_U2FCounter = 32;
    ButtonRequest_ConfirmEosAction = 33;
    ButtonRequest_ConfirmEosBudget = 34;
    ButtonRequest_ConfirmMemo = 35;
}

/**
 * Type of PIN request
 * @used_in PinMatrixRequest
 */
enum PinMatrixRequestType {
    PinMatrixRequestType_Current = 1;
    PinMatrixRequestType_NewFirst = 2;
    PinMatrixRequestType_NewSecond = 3;
}

/**
 * Structure representing BIP32 (hierarchical deterministic) node
 * Used for imports of private key into the device and exporting public key out of device
 * @used_in PublicKey
 * @used_in LoadDevice
 * @used_in DebugLinkState
 * @used_in Storage
 */
message HDNodeType {
    required uint32 depth = 1;
    required uint32 fingerprint = 2;
    required uint32 child_num = 3;
    required bytes chain_code = 4;
    optional bytes private_key = 5;
    optional bytes public_key = 6;
}

message HDNodePathType {
    required HDNodeType node = 1; // BIP-32 node in deserialized form
    repeated uint32 address_n = 2; // BIP-32 path to derive the key from node
}

/**
 * Structure representing Coin
 * @used_in Features
 */
message CoinType {
    optional string coin_name = 1;
    optional string coin_shortcut = 2;
    optional uint32 address_type = 3 [default = 0];
    optional uint64 maxfee_kb = 4;
    optional uint32 address_type_p2sh = 5 [default = 5];
    //optional uint32 address_type_p2wpkh = 6 [default=6]; REMOVED
    //optional uint32 address_type_p2wsh = 7 [default=10]; REMOVED
    optional string signed_message_header = 8;
    optional uint32 bip44_account_path = 9;
    optional uint32 forkid = 12;
    optional uint32 decimals = 13;
    optional bytes contract_address = 14;
    //optional bytes gas_limit = 15; REMOVED
    optional uint32 xpub_magic = 16 [default = 76067358];
    //optional uint32 xprv_magic = 17 [default=76066276]; REMOVED
    optional bool segwit = 18;
    optional bool force_bip143 = 19;
    optional string curve_name = 20;
    optional string cashaddr_prefix = 21;
    optional string bech32_prefix = 22;
    optional bool decred = 23;
    // optional uint32 version_group_id = 24; REMOVED
    optional uint32 xpub_magic_segwit_p2sh = 25;
    optional uint32 xpub_magic_segwit_native = 26;
    optional string nanoaddr_prefix = 27;
}

/**
 * Type of redeem script used in input
 * @used_in TxInputType
 */
message MultisigRedeemScriptType {
    repeated HDNodePathType pubkeys = 1; // pubkeys from multisig address (sorted lexicographically)
    repeated bytes signatures = 2; // existing signatures for partially signed input
    optional uint32 m = 3; // "m" from n, how many valid signatures is necessary for spending
}

/**
 * Structure representing raw transaction
 * @used_in RawTxAck
 */
message RawTransactionType {
    required bytes payload = 1;
}

/**
 * Structure representing request details
 * @used_in TxRequest
 */
message TxRequestDetailsType {
    optional uint32 request_index = 1; // device expects TxAck message from the computer
    optional bytes tx_hash = 2; // tx_hash of requested transaction
    optional uint32 extra_data_len = 3; // length of requested extra data
    optional uint32 extra_data_offset = 4; // offset of requested extra data
}

/**
 * Structure representing serialized data
 * @used_in TxRequest
 */
message TxRequestSerializedType {
    optional uint32 signature_index = 1; // 'signature' field contains signed input of this index
    optional bytes signature = 2; // signature of the signature_index input
    optional bytes serialized_tx = 3; // part of serialized and signed transaction
}

/**
 * Structure representing identity data
 * @used_in IdentityType
 */
message IdentityType {
    optional string proto = 1; // proto part of URI
    optional string user = 2; // user part of URI
    optional string host = 3; // host part of URI
    optional string port = 4; // port part of URI
    optional string path = 5; // path part of URI
    optional uint32 index = 6 [default = 0]; // identity index
}

/**
 * Structure representing policy data
 * @used_in ApplyPolicy
 */
message PolicyType {
    optional string policy_name = 1; // name of policy
    optional bool enabled = 2; // status of policy
}
